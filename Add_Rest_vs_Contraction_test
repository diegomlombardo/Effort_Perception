%% This guy makes average bold Force vs rest AND INB vs Control contrast %%%


%% ----------- Average BOLD Force vs Rest (Task 1 & 2) with HRF Lag -----------

% ----------- SETUP -----------

missing_subjects = [1, 9, 35];
total_subjects   = 47;
valid_subjects   = setdiff(1:total_subjects, missing_subjects);
num_subjects     = length(valid_subjects);

% Define ROI groups
roi_groups.premotor      = [7];        % Precentral Gyrus
roi_groups.supplementary = [26];       % Juxtapositional Lobule Cortex
roi_groups.sensory       = [17];       % Postcentral Gyrus
roi_groups.cingulate     = [29, 30];   % Cingulate Gyrus, Anterior & Posterior
roi_groups.insula        = [2];        % Insular Cortex
roi_groups.dlPFC         = [3, 4];     % Superior + Middle Frontal Gyrus (dlPFC)

group_names = fieldnames(roi_groups);
num_groups  = length(group_names);

% ----------- PARAMETERS FOR BLOCK DESIGN -----------

TR = 3;                    % seconds per TR
hemodynamic_lag_sec = 6;   % ~6 sec BOLD response delay
hemodynamic_lag_TRs = round(hemodynamic_lag_sec / TR); % 2 TR shift

total_time_points = 184;   % time points per run
contraction_length = 5;    % 15 sec / 3 sec per TR = 5 TRs
rest_length        = 8;    % 25 sec / 3 sec per TR â‰ˆ 8 TRs
num_contractions   = 6;

% ----------- CREATE LOGICAL INDEXING FOR REST AND CONTRACTION -----------

is_contraction = false(total_time_points, 1);
is_rest        = false(total_time_points, 1);

start_tp = 1;
for c = 1:num_contractions
    % Rest block first
    rest_range = start_tp : min(start_tp + rest_length - 1, total_time_points);
    is_rest(rest_range) = true;
    
    % Contraction block next
    contraction_start = start_tp + rest_length;
    contraction_range = contraction_start : ...
        min(contraction_start + contraction_length - 1, total_time_points);
    is_contraction(contraction_range) = true;
    
    % Update for next cycle
    start_tp = contraction_start + contraction_length;
end

% Any leftover time points after last contraction = rest
if start_tp <= total_time_points
    is_rest(start_tp:total_time_points) = true;
end

% ---- Apply Hemodynamic Lag ----
is_contraction_shifted = [false(hemodynamic_lag_TRs,1); ...
    is_contraction(1:end-hemodynamic_lag_TRs)];
is_contraction = is_contraction_shifted;

% ----------- INITIALIZE STORAGE -----------

tasks = {'task1', 'task2'};
num_tasks = numel(tasks);

bold_contraction = nan(num_subjects, num_groups, num_tasks);
bold_rest        = nan(num_subjects, num_groups, num_tasks);

% ----------- LOOP THROUGH TASKS AND SUBJECTS -----------

for t = 1:num_tasks
    task = tasks{t};
    subject_idx = 0;
    
    for subj = 1:total_subjects
        if ismember(subj, missing_subjects)
            continue;
        end
        subject_idx = subject_idx + 1;
        subj_str = sprintf('%02d', subj);
        file_name = ['ROIs_sub_' subj_str '_' task '.mat'];
        
        if ~isfile(file_name)
            warning('File not found: %s', file_name);
            continue;
        end
        
        % Load data (variable bold_data: [time x num_ROIs])
        data = load(file_name);
        bold = data.bold_data;  % [time x 48] assumed
        
        % ---- Compute per ROI group ----
        for g = 1:num_groups
            roi_indices = roi_groups.(group_names{g});
            
            % Extract ROI data for contraction and rest
            contraction_data = bold(is_contraction, roi_indices);
            rest_data        = bold(is_rest, roi_indices);
            
            % Flatten and remove outliers
            contraction_data = contraction_data(:);
            rest_data        = rest_data(:);
            contraction_data(isoutlier(contraction_data, 'median')) = NaN;
            rest_data(isoutlier(rest_data, 'median')) = NaN;
            
            % Compute mean after removing outliers
            bold_contraction(subject_idx, g, t) = mean(contraction_data, 'omitnan');
            bold_rest(subject_idx, g, t)        = mean(rest_data, 'omitnan');
        end
    end
end

% ----------- COMPUTE ACTIVATION (MOVEMENT - REST) -----------

bold_activation = bold_contraction - bold_rest; % [subjects x ROI x task]
mean_activation = squeeze(mean(bold_activation, 1, 'omitnan')); % [ROI x task]

% ----------- CREATE COMPARISON TABLE -----------

ROI_Names = group_names;
Task1_Activation = mean_activation(:,1);
Task2_Activation = mean_activation(:,2);
Diff_Task2_minus_Task1 = Task2_Activation - Task1_Activation;

T = table(ROI_Names, Task1_Activation, Task2_Activation, Diff_Task2_minus_Task1);

% ----------- DISPLAY RESULTS -----------

disp('==== Mean ROI Activation (Contraction - Rest) ====');
disp(T);

% Optional: Save the results
writetable(T, 'ROI_Activation_Comparison_Task1_vs_Task2.csv');

% ----------- END OF SCRIPT -----------

